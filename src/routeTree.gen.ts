/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LogoutImport } from './routes/logout'
import { Route as userRouteImport } from './routes/(user)/route'
import { Route as authRouteImport } from './routes/(auth)/route'
import { Route as IndexImport } from './routes/index'
import { Route as authSignupImport } from './routes/(auth)/signup'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as userListRouteImport } from './routes/(user)/list/route'
import { Route as userSettingsIndexImport } from './routes/(user)/settings/index'
import { Route as userListIndexImport } from './routes/(user)/list/index'
import { Route as userListIdRouteImport } from './routes/(user)/list/$id/route'
import { Route as userListIdIndexImport } from './routes/(user)/list/$id/index'

// Create/Update Routes

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const userRouteRoute = userRouteImport.update({
  id: '/(user)',
  getParentRoute: () => rootRoute,
} as any)

const authRouteRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authSignupRoute = authSignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => authRouteRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)

const userListRouteRoute = userListRouteImport.update({
  id: '/list',
  path: '/list',
  getParentRoute: () => userRouteRoute,
} as any)

const userSettingsIndexRoute = userSettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => userRouteRoute,
} as any)

const userListIndexRoute = userListIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => userListRouteRoute,
} as any)

const userListIdRouteRoute = userListIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => userListRouteRoute,
} as any)

const userListIdIndexRoute = userListIdIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => userListIdRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRoute
    }
    '/(user)': {
      id: '/(user)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof userRouteImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/(user)/list': {
      id: '/(user)/list'
      path: '/list'
      fullPath: '/list'
      preLoaderRoute: typeof userListRouteImport
      parentRoute: typeof userRouteImport
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/signup': {
      id: '/(auth)/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof authSignupImport
      parentRoute: typeof authRouteImport
    }
    '/(user)/list/$id': {
      id: '/(user)/list/$id'
      path: '/$id'
      fullPath: '/list/$id'
      preLoaderRoute: typeof userListIdRouteImport
      parentRoute: typeof userListRouteImport
    }
    '/(user)/list/': {
      id: '/(user)/list/'
      path: '/'
      fullPath: '/list/'
      preLoaderRoute: typeof userListIndexImport
      parentRoute: typeof userListRouteImport
    }
    '/(user)/settings/': {
      id: '/(user)/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof userSettingsIndexImport
      parentRoute: typeof userRouteImport
    }
    '/(user)/list/$id/': {
      id: '/(user)/list/$id/'
      path: '/'
      fullPath: '/list/$id/'
      preLoaderRoute: typeof userListIdIndexImport
      parentRoute: typeof userListIdRouteImport
    }
  }
}

// Create and export the route tree

interface authRouteRouteChildren {
  authLoginRoute: typeof authLoginRoute
  authSignupRoute: typeof authSignupRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginRoute: authLoginRoute,
  authSignupRoute: authSignupRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface userListIdRouteRouteChildren {
  userListIdIndexRoute: typeof userListIdIndexRoute
}

const userListIdRouteRouteChildren: userListIdRouteRouteChildren = {
  userListIdIndexRoute: userListIdIndexRoute,
}

const userListIdRouteRouteWithChildren = userListIdRouteRoute._addFileChildren(
  userListIdRouteRouteChildren,
)

interface userListRouteRouteChildren {
  userListIdRouteRoute: typeof userListIdRouteRouteWithChildren
  userListIndexRoute: typeof userListIndexRoute
}

const userListRouteRouteChildren: userListRouteRouteChildren = {
  userListIdRouteRoute: userListIdRouteRouteWithChildren,
  userListIndexRoute: userListIndexRoute,
}

const userListRouteRouteWithChildren = userListRouteRoute._addFileChildren(
  userListRouteRouteChildren,
)

interface userRouteRouteChildren {
  userListRouteRoute: typeof userListRouteRouteWithChildren
  userSettingsIndexRoute: typeof userSettingsIndexRoute
}

const userRouteRouteChildren: userRouteRouteChildren = {
  userListRouteRoute: userListRouteRouteWithChildren,
  userSettingsIndexRoute: userSettingsIndexRoute,
}

const userRouteRouteWithChildren = userRouteRoute._addFileChildren(
  userRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof userRouteRouteWithChildren
  '/logout': typeof LogoutRoute
  '/list': typeof userListRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/list/$id': typeof userListIdRouteRouteWithChildren
  '/list/': typeof userListIndexRoute
  '/settings': typeof userSettingsIndexRoute
  '/list/$id/': typeof userListIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof userRouteRouteWithChildren
  '/logout': typeof LogoutRoute
  '/login': typeof authLoginRoute
  '/signup': typeof authSignupRoute
  '/list': typeof userListIndexRoute
  '/settings': typeof userSettingsIndexRoute
  '/list/$id': typeof userListIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/(user)': typeof userRouteRouteWithChildren
  '/logout': typeof LogoutRoute
  '/(user)/list': typeof userListRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/signup': typeof authSignupRoute
  '/(user)/list/$id': typeof userListIdRouteRouteWithChildren
  '/(user)/list/': typeof userListIndexRoute
  '/(user)/settings/': typeof userSettingsIndexRoute
  '/(user)/list/$id/': typeof userListIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/logout'
    | '/list'
    | '/login'
    | '/signup'
    | '/list/$id'
    | '/list/'
    | '/settings'
    | '/list/$id/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/logout'
    | '/login'
    | '/signup'
    | '/list'
    | '/settings'
    | '/list/$id'
  id:
    | '__root__'
    | '/'
    | '/(auth)'
    | '/(user)'
    | '/logout'
    | '/(user)/list'
    | '/(auth)/login'
    | '/(auth)/signup'
    | '/(user)/list/$id'
    | '/(user)/list/'
    | '/(user)/settings/'
    | '/(user)/list/$id/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  authRouteRoute: typeof authRouteRouteWithChildren
  userRouteRoute: typeof userRouteRouteWithChildren
  LogoutRoute: typeof LogoutRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  authRouteRoute: authRouteRouteWithChildren,
  userRouteRoute: userRouteRouteWithChildren,
  LogoutRoute: LogoutRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(auth)",
        "/(user)",
        "/logout"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(auth)": {
      "filePath": "(auth)/route.tsx",
      "children": [
        "/(auth)/login",
        "/(auth)/signup"
      ]
    },
    "/(user)": {
      "filePath": "(user)/route.tsx",
      "children": [
        "/(user)/list",
        "/(user)/settings/"
      ]
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/(user)/list": {
      "filePath": "(user)/list/route.tsx",
      "parent": "/(user)",
      "children": [
        "/(user)/list/$id",
        "/(user)/list/"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/signup": {
      "filePath": "(auth)/signup.tsx",
      "parent": "/(auth)"
    },
    "/(user)/list/$id": {
      "filePath": "(user)/list/$id/route.tsx",
      "parent": "/(user)/list",
      "children": [
        "/(user)/list/$id/"
      ]
    },
    "/(user)/list/": {
      "filePath": "(user)/list/index.tsx",
      "parent": "/(user)/list"
    },
    "/(user)/settings/": {
      "filePath": "(user)/settings/index.tsx",
      "parent": "/(user)"
    },
    "/(user)/list/$id/": {
      "filePath": "(user)/list/$id/index.tsx",
      "parent": "/(user)/list/$id"
    }
  }
}
ROUTE_MANIFEST_END */
